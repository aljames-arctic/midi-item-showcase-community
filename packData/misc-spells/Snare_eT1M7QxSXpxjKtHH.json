{
  "name": "Snare",
  "type": "spell",
  "system": {
    "description": {
      "value": "<h2><span style=\"font-family:Signika, sans-serif\">Made by Quinn Dexter</span></h2><h3 style=\"box-sizing:border-box;user-select:text;margin:0px 0px 0.5rem;padding:0px;font-weight:normal;font-size:1.25em;border-bottom:none;color:rgb(25, 24, 19);font-family:Signika, sans-serif;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;letter-spacing:normal;orphans:2;text-align:start;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;-webkit-text-stroke-width:0px;text-decoration-thickness:initial;text-decoration-style:initial;text-decoration-color:initial\"><span style=\"font-family:Signika, sans-serif\">Requires:</span></h3><ul style=\"box-sizing:border-box;user-select:text;margin:0.5em 0px;padding:0px 0px 0px 1.5em;color:rgb(25, 24, 19);font-family:Signika, sans-serif;font-size:13px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;-webkit-text-stroke-width:0px;text-decoration-thickness:initial;text-decoration-style:initial;text-decoration-color:initial\"><li style=\"box-sizing:border-box;user-select:text\"><p style=\"box-sizing:border-box;user-select:text;margin:0.5em 0px;margin-block-end:0px\"><span style=\"font-family:Signika, sans-serif\">Template Macro</span></p></li><li style=\"box-sizing:border-box;user-select:text\"><p><span style=\"font-family:Signika, sans-serif\">Effect Macro</span></p></li><li style=\"box-sizing:border-box;user-select:text\"><p><span style=\"font-family:Signika, sans-serif\">DFreds Convenient Effects</span></p></li><li style=\"box-sizing:border-box;user-select:text\"><p><span style=\"font-family:Signika, sans-serif\">JB2A (optional)</span></p></li></ul>",
      "chat": "",
      "unidentified": ""
    },
    "source": {
      "custom": ""
    },
    "activation": {
      "type": "minute",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": "8",
      "units": "hour"
    },
    "cover": null,
    "crewed": false,
    "target": {
      "value": 2.5,
      "width": null,
      "units": "ft",
      "type": "sphere",
      "prompt": true
    },
    "range": {
      "value": null,
      "long": null,
      "units": "touch"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": null,
      "recovery": "",
      "prompt": true
    },
    "consume": {
      "type": "material",
      "target": "",
      "amount": 1,
      "scale": false
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": "",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 1,
    "school": "abj",
    "components": {
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "25 feet of cord or rope, which is consumed by the spell",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": false
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    }
  },
  "img": "icons/magic/nature/root-vine-thorned-coil-green.webp",
  "effects": [
    {
      "name": "Snare",
      "origin": "Actor.l55gZpaGabPZJ2dP.Item.NYZ4ApW94s2AqvSa",
      "duration": {
        "rounds": 4800,
        "startTime": null,
        "seconds": null,
        "combat": null,
        "turns": null,
        "startRound": null,
        "startTurn": null
      },
      "transfer": false,
      "disabled": false,
      "_id": "gCjkvEUvBPyH1akf",
      "changes": [],
      "description": "",
      "statuses": [],
      "flags": {
        "times-up": {
          "isPassive": false
        },
        "dae": {
          "selfTarget": false,
          "selfTargetAlways": true,
          "dontApply": false,
          "stackable": "multi",
          "showIcon": false,
          "durationExpression": "",
          "macroRepeat": "none",
          "specialDuration": []
        },
        "effectmacro": {
          "onDelete": {
            "script": "/*\nThis macro deletes the Templae Effects created by the Snare spell template wenn the according active effect is deleted\n*/\n\n//Get the origin key for the Active Effect to find the according Template Effect\nconst originKey = effect[\"origin\"];\n\n//If condition, just in case we do not get an origin.key (may be deleted at the end)\nif (originKey) {\n  const activeEffects = actor.effects;\n  //Filter the active effects to find snare related effects; should be the Template Effect\n  const activeSnareEffects = activeEffects.filter(effectOrigin => effectOrigin.origin === effect.origin);\n\n  //Array should have a length of 1, but why not, iterate it to delete all related effects\n  let activeEffectsToDelete = [];\n  for (let i=0; i<activeSnareEffects.length; i++) {\n\n  activeEffectsToDelete.push(activeSnareEffects[i].id);\n  }\n  await actor.deleteEmbeddedDocuments(\"ActiveEffect\",activeEffectsToDelete);\n\n} else {\n  Error(\"No origin found. Something went wrong.\")\n}\n\n\n"
          }
        }
      },
      "tint": "#ffffff",
      "_stats": {
        "coreVersion": "12.331",
        "systemId": null,
        "systemVersion": null,
        "createdTime": null,
        "modifiedTime": null,
        "lastModifiedBy": null,
        "compendiumSource": null,
        "duplicateSource": null
      },
      "img": "icons/magic/nature/root-vine-thorned-coil-green.webp",
      "type": "base",
      "system": {},
      "sort": 0,
      "_key": "!items.effects!eT1M7QxSXpxjKtHH.gCjkvEUvBPyH1akf"
    }
  ],
  "folder": null,
  "flags": {
    "scene-packer": {
      "hash": "09f96098ba1cad0cc1d237c293510358aaa58d3f",
      "sourceId": "Item.9ctTQIUNLaFB0BlO"
    },
    "tidy5e-sheet": {
      "favorite": false
    },
    "custom-character-sheet-sections": {
      "sectionName": ""
    },
    "midi-qol": {
      "effectActivation": false,
      "AoETargetType": "any",
      "AoETargetTypeIncludeSelf": true,
      "autoTarget": "default",
      "rollAttackPerTarget": "default",
      "itemCondition": "",
      "reactionCondition": "",
      "otherCondition": "",
      "effectCondition": ""
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "autoFailFriendly": false,
      "autoSaveFriendly": false,
      "rollOther": false,
      "critOther": false,
      "offHandWeapon": false,
      "magicdam": false,
      "magiceffect": true,
      "concentration": false,
      "toggleEffect": false,
      "ignoreTotalCover": false,
      "confirmTargets": "default",
      "noConcentrationCheck": false,
      "idr": false,
      "idi": false,
      "idv": false,
      "ida": false
    },
    "templatemacro": {
      "whenTurnEnd": {
        "asGM": false,
        "command": "/*This Macro makes an automated dexterity saving throw at the end of the token effected. If the saving throw is successful, the\ncondition restrained is removed and the template is removed**/\n\n//if game is not in comabt the dexterity roll needs to be done manually.\nif (!game.combat) {\n    console.log(\"Game not in combat mode. Disabling Turn End Macro.\");\n    return;\n}\n\nconst sourceActor = getSourceActor(template);\nconst targetActor = token.actor;\n\n//Create a chat message for flair\nlet cMessage = targetActor?.name + \" tries to get out of the trap.\";\nChatMessage.create({ content: cMessage });\n\n// Do the dexterity save check\nlet saveRollResult = await targetActor.rollAbilitySave('dex');\nlet spellDCCheckPassed = (saveRollResult.total >= getSpellDC(sourceActor));\n\n//Checks whether the dexterity saving throw was successful\nif (spellDCCheckPassed) {\n    //Only the condition \"restrained\" is removed, as the character is still prone when the trap has been disabled.\n    await removeCondition(targetActor, \"Restrained\");\n    await removeTrap(sourceActor, template);\n    let cMessage = targetActor?.name + \" achieved to get out of the magical trap of \" + sourceActor.name + \" and falls prone to the ground.\";\n    ChatMessage.create({ content: cMessage });\n} else {\n    let cMessage = targetActor?.name + \" did not acieve to get out of the magical trap of \" + sourceActor.name + \" and still hangs in the air.\";\n    ChatMessage.create({ content: cMessage });\n}\n\n// Removes a condition to an actor. Parameters overlay and orogin are not used, but keep them for further implementations\nasync function removeCondition(actor, name, overlay, origin) {\n    if (await game.dfreds.effectInterface.hasEffectApplied(name, actor.uuid)) {\n        await game.dfreds.effectInterface.removeEffect(\n            {\n                'effectName': name,\n                'uuid': actor.uuid,\n                'origin': origin,\n                'overlay': overlay\n            }\n        )\n    }\n}\n\n//Get spell dc of the avtor\nfunction getSpellDC(sourceActor) {\n    const spellDC = sourceActor?.system.attributes.spelldc;\n    return spellDC;\n}\n\n//Get the actor responsible for the template\nfunction getSourceActor(sourceTemplate) {\n    let sourceActor;\n    let sourceUuid = sourceTemplate?.getFlag(\"midi-qol\", \"originUuid\").split(\".\");\n    //Just a fallback, if the midi-oql flag is not found\n    if (!sourceUuid) {\n        sourceUuid = sourceTemplate?.getFlag(\"dnd5e\", \"origin\").split(\".\");\n    }\n\n    //hoping, that the actor id is on position 1 in the array\n    if (sourceUuid[0] === \"Actor\") {\n\n        sourceActor = game.actors.get(sourceUuid[1]);\n    }\n    return sourceActor;\n}\n\n\n//Removes the Snare active effect from the caster\nasync function removeTrap(trapActor, trapTemplate) {\n    const activeEffects = trapActor.effects;\n    let activeEffectsToDelete = [];\n\n    let sourceUuid = trapTemplate?.getFlag(\"midi-qol\", \"originUuid\");\n    //Just a fallback, if the midi-oql flag is not found\n    if (!sourceUuid) {\n        sourceUuid = trapTemplate?.getFlag(\"dnd5e\", \"origin\");\n    }\n\n    const activeSnareEffects = activeEffects.filter(effectOrigin => effectOrigin.origin === sourceUuid);\n    for (let i = 0; i < activeSnareEffects.length; i++) {\n        activeEffectsToDelete.push(activeSnareEffects[i].id);\n    }\n    await trapActor.deleteEmbeddedDocuments(\"ActiveEffect\", activeEffectsToDelete);\n}\n\n"
      },
      "whenThrough": {
        "asGM": false,
        "command": "//If the entering event has been triggered by a forced move, when walking through the template, do not execute this macro again\nif (template.getFlag(\"world\", \"snareTrapTriggered\")) {\n    return\n}\n\nconst sourceActor = getSourceActor(template);\nconst targetActor = token.actor;\n\n//Create a chat message for flair\nlet cMessage = targetActor?.name + \" steppd on the magical trap of \" + sourceActor?.name + \"! Let's see what happens.\";\nChatMessage.create({ content: cMessage });\n\n// Do the dexterity save check\nlet saveRollResult = await targetActor.rollAbilitySave('dex');\nlet spellDCCheckPassed = (saveRollResult.total >= getSpellDC(sourceActor));\n\n//If saved, nothing happens only a nice chate message. If not, target is set to prone and restrained,\n//moved 3 feetd higher and the trap is removed\nif (spellDCCheckPassed) {\n    let cMessage = targetActor?.name + \" saved and walks therefore elegantly over the trap.\"\n    ChatMessage.create({ content: cMessage });\n} else {\n    let cMessage = targetActor?.name + \" did not achieve to pass the trap safely, falls prone and is pulled into the air.\"\n    ChatMessage.create({ content: cMessage });\n    //Uncomment this line for the \"wentThrough\" hook\n    await moveTokenToTemplate (token, template);\n    await addCondition(targetActor, \"Prone\");\n    await addCondition(targetActor, \"Restrained\");\n    const newElevation = token.document.elevation + 3;\n    await token.document.update({ elevation: newElevation });\n}\n\n\n// Adds a condition to an actor\nasync function addCondition(actor, name, overlay, origin) {\n    if (!(await game.dfreds.effectInterface.hasEffectApplied(name, actor.uuid))) {\n        await game.dfreds.effectInterface.addEffect(\n            {\n                'effectName': name,\n                'uuid': actor.uuid,\n                'origin': origin,\n                'overlay': overlay\n            }\n        )\n    }\n}\n\n//ONly calles in the \nasync function moveTokenToTemplate(tokenToMove, targetTemplate) {\n    await targetTemplate.setFlag('world', 'snareTrapTriggered', true);\n    const newTokenPos = { x: targetTemplate.x - (canvas.grid.size * tokenToMove.document.width / 2), y: targetTemplate.y - (canvas.grid.size * tokenToMove.document.height / 2) };\n    await token.document.update(newTokenPos);\n}\n\n\n//Get spell dc of the avtor\nfunction getSpellDC(sourceActor) {\n    const spellDC = sourceActor?.system.attributes.spelldc;\n    return spellDC;\n}\n\n//Get the actor responsible for the template\nfunction getSourceActor(sourceTemplate) {\n    let sourceActor;\n    let sourceUuid = sourceTemplate?.getFlag(\"midi-qol\", \"originUuid\").split(\".\");\n    //Just a fallback, if the midi-oql flag is not found\n    if (!sourceUuid) {\n        sourceUuid = sourceTemplate?.getFlag(\"dnd5e\", \"origin\").split(\".\");\n    }\n\n    //hoping, that the actor id is on position 1 in the array\n    if (sourceUuid[0] === \"Actor\") {\n\n        sourceActor = game.actors.get(sourceUuid[1]);\n    }\n    return sourceActor;\n}\n"
      },
      "whenEntered": {
        "asGM": false,
        "command": "//If the entering event has been triggered by a forced move, when walking through the template, do not execute this macro again\nif (template.getFlag(\"world\", \"snareTrapTriggered\")) {\n    return\n}\n\nconst sourceActor = getSourceActor(template);\nconst targetActor = token.actor;\n\n//Create a chat message for flair\nlet cMessage = targetActor?.name + \" steppd on the magical trap of \" + sourceActor?.name + \"! Let's see what happens.\";\nChatMessage.create({ content: cMessage });\n\n// Do the dexterity save check\nlet saveRollResult = await targetActor.rollAbilitySave('dex');\nlet spellDCCheckPassed = (saveRollResult.total >= getSpellDC(sourceActor));\n\n//If saved, nothing happens only a nice chate message. If not, target is set to prone and restrained,\n//moved 3 feetd higher and the trap is removed\nif (spellDCCheckPassed) {\n    let cMessage = targetActor?.name + \" saved and walks therefore elegantly over the trap.\"\n    ChatMessage.create({ content: cMessage });\n} else {\n    let cMessage = targetActor?.name + \" did not achieve to pass the trap safely, falls prone and is pulled into the air.\"\n    ChatMessage.create({ content: cMessage });\n    //Uncomment this line for the \"wentThrough\" hook\n    //await moveTokenToTemplate (token, template);\n    await addCondition(targetActor, \"Prone\");\n    await addCondition(targetActor, \"Restrained\");\n    const newElevation = token.document.elevation + 3;\n    await token.document.update({ elevation: newElevation });\n}\n\n\n// Adds a condition to an actor\nasync function addCondition(actor, name, overlay, origin) {\n    if (!(await game.dfreds.effectInterface.hasEffectApplied(name, actor.uuid))) {\n        await game.dfreds.effectInterface.addEffect(\n            {\n                'effectName': name,\n                'uuid': actor.uuid,\n                'origin': origin,\n                'overlay': overlay\n            }\n        )\n    }\n}\n\n//ONly calles in the \nasync function moveTokenToTemplate(tokenToMove, targetTemplate) {\n    await targetTemplate.setFlag('world', 'snareTrapTriggered', true);\n    const newTokenPos = { x: targetTemplate.x - (canvas.grid.size * tokenToMove.document.width / 2), y: targetTemplate.y - (canvas.grid.size * tokenToMove.document.height / 2) };\n    await token.document.update(newTokenPos);\n}\n\n\n//Get spell dc of the avtor\nfunction getSpellDC(sourceActor) {\n    const spellDC = sourceActor?.system.attributes.spelldc;\n    return spellDC;\n}\n\n//Get the actor responsible for the template\nfunction getSourceActor(sourceTemplate) {\n    let sourceActor;\n    let sourceUuid = sourceTemplate?.getFlag(\"midi-qol\", \"originUuid\").split(\".\");\n    //Just a fallback, if the midi-oql flag is not found\n    if (!sourceUuid) {\n        sourceUuid = sourceTemplate?.getFlag(\"dnd5e\", \"origin\").split(\".\");\n    }\n\n    //hoping, that the actor id is on position 1 in the array\n    if (sourceUuid[0] === \"Actor\") {\n\n        sourceActor = game.actors.get(sourceUuid[1]);\n    }\n    return sourceActor;\n}\n"
      }
    },
    "core": {},
    "exportSource": {
      "world": "eberron",
      "system": "dnd5e",
      "coreVersion": "11.307",
      "systemVersion": "2.3.0"
    },
    "region-attacher": {
      "attachRegionToTemplate": false
    }
  },
  "_stats": {
    "systemId": "dnd5e",
    "systemVersion": "3.1.2",
    "coreVersion": "12.331",
    "createdTime": 1691695541803,
    "modifiedTime": 1724968786152,
    "lastModifiedBy": "B2BBHntfpytXE8DP",
    "compendiumSource": null,
    "duplicateSource": null
  },
  "ownership": {
    "default": 0,
    "B2BBHntfpytXE8DP": 3
  },
  "_id": "eT1M7QxSXpxjKtHH",
  "sort": 2000000,
  "_key": "!items!eT1M7QxSXpxjKtHH"
}
